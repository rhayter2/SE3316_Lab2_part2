{"version":3,"sources":["index.js"],"names":["Connect4","props","state","turn1","board","end","message","placePeice","bind","this","setState","r","row","c","push","x","checkVertical","checkHorizontal","checkDiagonalRight","checkDiagonalLeft","checkTie","togglePlayer","className","onClick","createBoard","map","i","Row","call","React","Component","cell","C4Button","value","column","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d83dba31.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Connect4 extends React.Component\r\n{  \r\n  constructor(props)\r\n  {\r\n    super(props)\r\n    this.state = {\r\n\r\n    turn1: true,\r\n    board: [],\r\n    end: false,\r\n    message: ''\r\n    }\r\n    //bind play peice so it can be called from the event triggers\r\n    this.placePeice = this.placePeice.bind(this);\r\n  }\r\n\r\n\r\n  togglePlayer()\r\n  {this.setState({'turn1':!this.state.turn1})}\r\n\r\n  //initialize/reset a board\r\n  createBoard()\r\n  {//create rowws and collums\r\n    let board = [];\r\n    for (let r = 0; r < 6; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < 7; c++) { row.push(null) }\r\n      board.push(row);\r\n    }\r\n    this.setState({//reset states to their default\r\n      board,\r\n      turn1: true,\r\n      end: false,\r\n      message: ''\r\n    });\r\n  }\r\n \r\n  placePeice(c){\r\n    if (!this.state.end)\r\n    {let board=this.state.board;//create a board in this function and make it the same as the board state\r\n      for (let r = 5; r >= 0; r--) {//goes through all rowws in this collum of the board and checks if thir empty\r\n        if (!board[r][c]) {\r\n          if(this.state.turn1)//when it finds an empty slot, chaks if its turn 1, if so fills slot with 1, if not then its turn t, fill slot with 2\r\n          {board[r][c] = 1}\r\n          else\r\n          {board[r][c] =2}\r\n          break;\r\n        }\r\n      }\r\n      //check board for wins/tie\r\n      //x will be set to the result of any check, the one that do not return a win/tie will return null and be ignored\r\n      //if thers a winner/tie end is set to true and a mesage dispalys, otherwise it updates the bard and togles the curent turn\r\n      let x = this.checkVertical(board)||this.checkHorizontal(board)||this.checkDiagonalRight(board)||this.checkDiagonalLeft(board)||this.checkTie(board);\r\n      if (x=== 1)\r\n      {\r\n        this.setState({board});//update the board\r\n        this.setState({end : true});\r\n        this.setState({ message: 'red wins' });\r\n      }\r\n      else if(x===2)\r\n      {\r\n        this.setState({board});//update the board\r\n        this.setState({end : true});\r\n        this.setState({ message: 'yellow wins' });\r\n      }\r\n      else if(x==='tie')\r\n      {\r\n        this.setState({board});//update the board\r\n        this.setState({end : true});\r\n        this.setState({ message: 'tie' });\r\n      }\r\n      else\r\n      {\r\n        this.setState({board});//update the board\r\n        this.togglePlayer();\r\n      }\r\n\r\n    }\r\n    else{this.setState({ message: 'Game Over, Please Restart' });}\r\n  }\r\n\r\n  checkVertical(board)\r\n  {   \r\n    for (let r = 3; r < 6; r++) // Check only if row is 3 or greater\r\n    {\r\n      for (let c = 0; c < 7; c++) //check each collum\r\n      {\r\n        if (board[r][c]) //checks that the position is not empty\r\n        {\r\n          if (board[r][c] === board[r - 1][c] && board[r][c] === board[r - 2][c] &&board[r][c] === board[r - 3][c]) //checks if the first peice found is the same as the next 3\r\n          {\r\n            return board[r][c]; //returns the value of the 4 peices found   \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkHorizontal(board) \r\n  {  \r\n    for (let r = 0; r < 6; r++)  //check each row\r\n    {\r\n      for (let c = 0; c < 4; c++) // Check only if column is 3 or less\r\n      {\r\n        if (board[r][c]) //checks that the position is not empty\r\n        {\r\n          if (board[r][c] === board[r][c + 1] && board[r][c] === board[r][c + 2] &&board[r][c] === board[r][c + 3]) //checks if the first peice found is the same as the next 3\r\n          {\r\n            return board[r][c];//returns the value of the 4 peices found  \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  checkDiagonalRight(board) \r\n  {\r\n    // Check only if row is 3 or greater AND column is 3 or less\r\n    for (let r = 3; r < 6; r++) \r\n    {\r\n      for (let c = 0; c < 4; c++) \r\n      {\r\n        if (board[r][c]) \r\n        {\r\n          if (board[r][c] === board[r - 1][c + 1] &&board[r][c] === board[r - 2][c + 2] &&board[r][c] === board[r - 3][c + 3]) \r\n          {\r\n            return board[r][c];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  checkDiagonalLeft(board) \r\n  {\r\n    // Check only if row is 3 or greater AND column is 3 or greater\r\n    for (let r = 3; r < 6; r++) \r\n    {\r\n      for (let c = 3; c < 7; c++) \r\n      {\r\n        if (board[r][c]) \r\n        {\r\n          if (board[r][c] === board[r - 1][c - 1] && board[r][c] === board[r - 2][c - 2] &&board[r][c] === board[r - 3][c - 3])\r\n          {\r\n            return board[r][c];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  checkTie(board) \r\n  {//goes through each position on the board\r\n    for (let r = 0; r < 6; r++) \r\n    {\r\n      for (let c = 0; c < 7; c++) \r\n      {\r\n        if (board[r][c] === null) //checks if they are empty if any position is empty returns null (this mean its not a tie yet)\r\n        {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return 'tie'; //if the previous return was never trigered then thers no empty slot, return tie   \r\n  }\r\n  \r\n\r\n  render()\r\n  {\r\n    \r\n    //button to start the game\r\n    //bellow it is a generated table\r\n    //uses the map function to thake the board state and make a table out of it (i found this code online, im assuming it ok to use)\r\n    return (\r\n      <div>\r\n        \r\n        <button className='button' onClick={() => {this.createBoard()}}>New Game</button>\r\n        \r\n        <table>\r\n          <thead>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.board.map((row, i) => (<Row key={i} row={row} call={this.placePeice} />))}\r\n          </tbody>\r\n        </table>\r\n        \r\n        \r\n        <label className=\"message\" >{this.state.message}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n // Row component \r\n //ther rows and buttons used in the table(based on code i found onine)\r\n const Row = ({ row, call }) => {\r\n  return (\r\n    <tr>\r\n      {row.map((cell, i) => <C4Button key={i} value={cell} column={i} call={call} />)}\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst C4Button = ({ value, column, call }) => {\r\n  let color = 'white';\r\n  if (value === 1) {\r\n    color = 'red';\r\n  } else if (value === 2) {\r\n    color = 'yellow';\r\n  }\r\n    \r\n  return (\r\n    <td>\r\n      <button className=\"boardCell\" onClick={() => {call(column)}}>\r\n        <button className={color}></button>\r\n      </button>\r\n    </td>\r\n  );\r\n};\r\n\r\n\r\n//render\r\n\r\nReactDOM.render(\r\n  <div>\r\n  <Connect4/>\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}